generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int         @id @default(autoincrement())
  phone     String?     @unique
  email     String?     @unique
  name      String
  avatar    String?
  cratedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tokens    Token[]
  Products  Product[]
  favs      Fav[]
  posts     Post[]
  answers   Answer[]
  wondering Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  @@index([userId])
}

model Product {
  id          Int      @id @default(autoincrement())
  cratedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  imageURL    String
  name        String
  price       Int
  description String   @db.MediumText
  favs        Fav[]

  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Post {
  id        Int         @id @default(autoincrement())
  cratedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}
