generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  cratedAt        DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  Products        Product[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  favs            Fav[]
  sales           Sale[]
  purchases       Purchase[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  cratedAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  imageURL    String
  name        String
  price       Int
  description String     @db.MediumText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]

  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  cratedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id          Int      @id @default(autoincrement())
  cratedAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt
  review      String   @db.MediumText
  cratedBy    User     @relation(name: "writtenReviews", fields: [cratedById], references: [id], onDelete: Cascade)
  cratedById  Int
  cratedFor   User     @relation(name: "receivedReviews", fields: [cratedForId], references: [id], onDelete: Cascade)
  cratedForId Int
  score       Int      @default(1)

  @@index([cratedById])
  @@index([cratedForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  cratedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}
